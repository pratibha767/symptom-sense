{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prati\\\\OneDrive\\\\Desktop\\\\new SPD\\\\symptom-sense\\\\frontend\\\\src\\\\index.js\";\nimport React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Optional: Add a global context (e.g., for theme or user auth)\nimport { ThemeProvider } from \"./context/ThemeContext\";\n\n// A simple loading component for lazy loading\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingScreen = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"loading-container\",\n  children: /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Loading SymptomSense...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n\n// Root rendering\n_c = LoadingScreen;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this));\nvar _c;\n$RefreshReg$(_c, \"LoadingScreen\");","map":{"version":3,"names":["React","Suspense","ReactDOM","App","ThemeProvider","jsxDEV","_jsxDEV","LoadingScreen","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","root","createRoot","document","getElementById","render","StrictMode","fallback","$RefreshReg$"],"sources":["C:/Users/prati/OneDrive/Desktop/new SPD/symptom-sense/frontend/src/index.js"],"sourcesContent":["import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\n// Optional: Add a global context (e.g., for theme or user auth)\r\nimport { ThemeProvider } from \"./context/ThemeContext\";\r\n\r\n// A simple loading component for lazy loading\r\nconst LoadingScreen = () => (\r\n  <div className=\"loading-container\">\r\n    <h2>Loading SymptomSense...</h2>\r\n  </div>\r\n);\r\n\r\n// Root rendering\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider>\r\n      <Suspense fallback={<LoadingScreen />}>\r\n        <App />\r\n      </Suspense>\r\n    </ThemeProvider>\r\n  </React.StrictMode>\r\n);\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,aAAa;;AAEpB;AACA,SAASC,aAAa,QAAQ,wBAAwB;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAGA,CAAA,kBACpBD,OAAA;EAAKE,SAAS,EAAC,mBAAmB;EAAAC,QAAA,eAChCH,OAAA;IAAAG,QAAA,EAAI;EAAuB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC7B,CACN;;AAED;AAAAC,EAAA,GANMP,aAAa;AAOnB,MAAMQ,IAAI,GAAGb,QAAQ,CAACc,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cACTb,OAAA,CAACN,KAAK,CAACoB,UAAU;EAAAX,QAAA,eACfH,OAAA,CAACF,aAAa;IAAAK,QAAA,eACZH,OAAA,CAACL,QAAQ;MAACoB,QAAQ,eAAEf,OAAA,CAACC,aAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAAAJ,QAAA,eACpCH,OAAA,CAACH,GAAG;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACA,CACpB,CAAC;AAAC,IAAAC,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}